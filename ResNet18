import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision.datasets import ImageFolder
import torchvision.transforms as transforms
import torch.nn.functional as F
import torchvision.models as models

# 定义数据转换和加载器
transform = transforms.Compose([
    transforms.Resize((50, 150)),  # 调整图片大小为 50*150
    transforms.ToTensor(),  # 将图片转换为张量
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))  # 归一化图像
])

train_dataset = ImageFolder('D:\\train_folder_c', transform=transform)
train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)

val_dataset = ImageFolder('D:\\val_folder_c', transform=transform)
val_loader = DataLoader(val_dataset, batch_size=16, shuffle=False)

class ResNet(nn.Module):
    def __init__(self, num_classes):
        super(ResNet, self).__init__()
        self.model = models.resnet34(pretrained=False)  # 使用预训练的ResNet-18模型
        self.model.fc = nn.Linear(512, num_classes)  # 修改全连接层的输入大小

    def forward(self, x):
        x = self.model(x)
        return x

# 实例化ResNet模型
model = ResNet(num_classes=4)

# 定义损失函数和优化器
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 使用 GPU 加速
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# 训练模型
num_epochs = 100
for epoch in range(num_epochs):
    model.train()
    train_loss = 0.0
    correct = 0
    total = 0

    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        train_loss += loss.item()
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()

    train_loss /= len(train_loader)
    train_acc = 100. * correct / total

    print(f"Epoch [{epoch + 1}/{num_epochs}], Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%")

    if train_loss < 0.01:
        print("损失值小于0.01，停止训练")
        break

torch.save(model.state_dict(), 'ResNet Classifier Central.pth')  # 保存模型参数

# 验证模型
model.load_state_dict(torch.load('ResNet Classifier Central.pth'))  # 加载模型参数
model.eval()
val_loss = 0.0
correct = 0
total = 0

with torch.no_grad():
    for images, labels in val_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        loss = criterion(outputs, labels)

        val_loss += loss.item()
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()

val_loss /= len(val_loader)
val_acc = 100. * correct / total

print(f"Validation Loss: {val_loss:.4f}, Validation Acc: {val_acc:.2f}%")

model.load_state_dict(torch.load('ResNet Classifier Central.pth'))  # 加载模型参数
model.eval()
val_loss = 0.0
correct = 0
total = 0
wrong_predictions = []

with torch.no_grad():
    for i, (images, labels) in enumerate(val_loader):  # 使用enumerate获取索引
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        loss = criterion(outputs, labels)

        val_loss += loss.item()
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()

        # 预测错误的样本
        for j in range(len(labels)):  # 使用正确的索引获取图像和标签
            if predicted[j] != labels[j]:
                wrong_predictions.append((val_dataset.imgs[i * val_loader.batch_size + j][0], labels[j].item(), predicted[j].item()))

val_loss /= len(val_loader)
val_acc = 100. * correct / total

# 打印预测错误的样本信息
print("Wrong Predictions:")
for file_name, true_label, pred_label in wrong_predictions:
    print(f"Image: {file_name}, True Label: {true_label}, Predicted Label: {pred_label}")
