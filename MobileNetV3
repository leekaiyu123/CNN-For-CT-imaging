import cv2
import os
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
from torchvision.models import mobilenet_v3_small

# 检查是否有可用的GPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 加载图像
image_folder = 'D://ROI/'
images = []
for i in range(1, 1000):
    image_path = image_folder + str(i) + '.png'
    image = cv2.imread(image_path)  # 读取为RGB图像
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # 将图像颜色空间从BGR转换为RGB
    images.append(image)  # 图像添加至列表

print("共读取了", len(images), "张图片")

# 加载感兴趣区标注信息
roi_file = 'D://ROI select.txt'
rois = []
with open(roi_file, 'r') as f:  # 只读模式打开文件
    lines = f.readlines()
    for line in lines:
        if line.startswith('Image'):
            continue
        roi = line.strip().split(', ')
        label = roi[0].lower()
        if label in ['left', 'right', 'central']:
            label = ['left', 'right', 'central'].index(label)
            roi = [label] + [int(coord) for coord in roi[1:]]
            rois.append(roi)

# 定义自定义数据集类
class ImageDataset(Dataset):
    def __init__(self, images, rois):
        self.images = images
        self.rois = rois

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        image = self.images[idx]
        rois = self.rois[idx*3:idx*3+3]
        if len(rois) == 0:  # 没有感兴趣区标注信息
            centers = torch.zeros(3, 2)  # 设置centers为空的张量
        else:
            centers = torch.tensor([roi[1:3] for roi in rois]).view(3, 2)
        return image, centers

# 定义MobileNetV3 Small模型类
class MobileNetV3Small(nn.Module):
    def __init__(self):
        super(MobileNetV3Small, self).__init__()
        self.features = mobilenet_v3_small(pretrained=False).features
        self.classifier = nn.Linear(576, 3*2)  # 输出6维，表示3个感兴趣区的中心点坐标

    def forward(self, x):
        x = self.features(x)
        x = x.mean([2, 3])  # 对特征图的高度和宽度进行平均池化
        x = self.classifier(x)
        x = x.view(x.size(0), 3, 2)
        return x

# 创建数据加载器
dataset = ImageDataset(images, rois)
dataloader = DataLoader(dataset, batch_size=3, shuffle=True)

# 创建模型实例并移动到GPU上
model = MobileNetV3Small().to(device)

# 定义损失函数和优化器
criterion = nn.MSELoss()  # 使用均方误差作为损失函数
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 训练模型
num_epochs = 1000
for epoch in range(num_epochs):
    total_loss = 0.0
    for batch_idx, (images, centers) in enumerate(dataloader):
        # 将数据移动到GPU上
        images = images.permute(0, 3, 1, 2).float().to(device)
        centers = centers.float().to(device)

        # 前向传播
        outputs = model(images)
        loss = criterion(outputs, centers)

        # 反向传播和优化
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        total_loss += loss.item()

    avg_loss = total_loss / len(dataloader)
    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {avg_loss:.4f}')

    if avg_loss < 5:
        print("损失值小于10，停止训练")
        break

# 打印预测的坐标和损失值
with torch.no_grad():
    inputs = images.to(device)  # 将输入数据移动到GPU上
    predicted_centers = model(inputs).cpu()
    predicted_centers = predicted_centers.view(-1, 3, 2)
    print("Predicted Centers:")
    print(predicted_centers)
    print("Loss:", loss.item())

# 保存模型
torch.save(model.state_dict(), 'D:\CNN project\ROI autodetected')
print("模型已保存")

# 未标注感兴趣区的图像文件夹路径
unlabeled_folder = 'D://unlabeled/'

# 加载未标注感兴趣区的图像
unlabeled_images = []
for filename in os.listdir(unlabeled_folder):
    image_path = os.path.join(unlabeled_folder, filename)
    image = cv2.imread(image_path, 0)  # 读取为灰度图像
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # 将图像颜色空间从BGR转换为RGB
    unlabeled_images.append(image)

class UnlabeledImageDataset(Dataset):
    def __init__(self, images):
        self.images = images

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        image = self.images[idx]
        return image

# 创建未标注感兴趣区图像的数据集对象
unlabeled_dataset = UnlabeledImageDataset(unlabeled_images)

# 创建未标注感兴趣区图像的数据加载器
unlabeled_dataloader = DataLoader(unlabeled_dataset, batch_size=3, shuffle=False)

# 加载训练好的模型
model = MobileNetV3Small().to(device)
model.load_state_dict(torch.load('D:\CNN project\ROI autodetected'))

# 开启评估模式
model.eval()

# 标注未标注感兴趣区的图像
with torch.no_grad():
    for batch_idx, images in enumerate(unlabeled_dataloader):
        # 将数据移动到GPU上
        images = images.permute(0, 3, 1, 2).float().to(device)

        # 前向传播
        predicted_centers = model(images)
        predicted_centers = predicted_centers.cpu().numpy()

        # 处理预测结果，进行标注操作
        for idx, predicted_center in enumerate(predicted_centers):
            image = unlabeled_images[batch_idx * 3 + idx]
            # 在图像上标注预测的感兴趣区中心点
            for center in predicted_center:
                x, y = int(center[0]), int(center[1])
                cv2.circle(image, (x, y), 5, (0, 255, 0), -1)

            # 显示标注后的图像
            cv2.imshow('Labeled Image', image)
            cv2.waitKey(0)
            cv2.destroyAllWindows()
